/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lib.manager.project;

import java.awt.HeadlessException;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.QUESTION_MESSAGE;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.util.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import static javax.swing.JOptionPane.YES_NO_OPTION;

/**
 *
 * @author AnBewwwwwww
 */
public class signup extends javax.swing.JFrame {

    private boolean IsLibrarian;
    private int maxId;
    private static String Uname,Pass,ConfirmPass,Email,FullName;
    private boolean checkUsernameUser(String username) {
        try {
          Connection conn = DB.getConnection();
          PreparedStatement stmt = conn.prepareStatement("SELECT * FROM users WHERE username = ?");
          stmt.setString(1, username);
          ResultSet rs = stmt.executeQuery();

          if(rs.next()) {
            return true; 
          }
        } catch (SQLException e) {
          e.printStackTrace();
        }

        return false;
    }
    
    private boolean checkEmailLibrarian(String email) {
        try {
          Connection conn = DB.getConnection();
          PreparedStatement stmt = conn.prepareStatement("SELECT * FROM librarian WHERE email = ?");
          stmt.setString(1, Email);
          ResultSet rs = stmt.executeQuery();

          if(rs.next()) {
            return true;
          }
        } catch (SQLException e) {
          e.printStackTrace();
        }

        return false;
    }
    private boolean checkUsernameLibrarian(String username) {
        try {
          Connection conn = DB.getConnection();
          PreparedStatement stmt = conn.prepareStatement("SELECT * FROM librarian WHERE username = ?");
          stmt.setString(1, username);
          ResultSet rs = stmt.executeQuery();

          if(rs.next()) {
            return true; 
          }
        } catch (SQLException e) {
          e.printStackTrace();
        }

        return false;
    }
    
    private boolean checkEmailUser(String email) {
        try {
          Connection conn = DB.getConnection();
          PreparedStatement stmt = conn.prepareStatement("SELECT * FROM Users WHERE email = ?");
          stmt.setString(1, Email);
          ResultSet rs = stmt.executeQuery();

          if(rs.next()) {
            return true;
          }
        } catch (SQLException e) {
          e.printStackTrace();
        }

        return false;
    }
    /**
     * Creates new form NewJFrame
     */
    public signup() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        email = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        choice = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        confirmpassword = new javax.swing.JPasswordField();
        jLabel6 = new javax.swing.JLabel();
        fullname = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel5.setFont(new java.awt.Font("Arial Black", 0, 36)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Sign Up");

        choice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "User", "Librarian" }));
        choice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceActionPerformed(evt);
            }
        });

        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Username");

        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Password");

        jLabel3.setText("Confirm Password");

        jLabel4.setText("Email");

        jLabel6.setText("Fullname");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(80, 80, 80)
                        .addComponent(jButton3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(email, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                                    .addComponent(password)
                                    .addComponent(confirmpassword)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(35, 35, 35))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(83, 83, 83)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(username, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                                    .addComponent(fullname))))
                        .addGap(5, 5, 5)))
                .addGap(103, 103, 103))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(fullname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addComponent(jLabel3))
                    .addComponent(confirmpassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(email, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void choiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceActionPerformed
        String selectedItem = (String)choice.getSelectedItem();
        System.out.println("Lua chon la:" + selectedItem);

        if(selectedItem.equals("Librarian")) {
            IsLibrarian = true;
        }else{
            IsLibrarian = false;
        }
        System.out.println(IsLibrarian);
    }//GEN-LAST:event_choiceActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();
        login.main(new String[] {});
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        Uname = username.getText();
        Pass = String.valueOf(password.getPassword());  
        ConfirmPass = String.valueOf(confirmpassword.getPassword());
        Email = email.getText();
        FullName = fullname.getText();


        if(Uname.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter your username");
            return;
        } else if(Uname.contains(" ")) {
            JOptionPane.showMessageDialog(this, "Username must not contain spaces");
            return;
        }


        if(Pass.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter your password");  
            return;
        }else if(Pass.contains(" ")) {
            JOptionPane.showMessageDialog(this, "Password must not contain spaces");
            return;
        }else if(Pass.length() < 8) {
            JOptionPane.showMessageDialog(this, "Password must be at least 8 characters long");
        return;
        }else if(!Pass.matches(".*\\d.*") || !Pass.matches(".*[a-zA-Z].*")) {
            JOptionPane.showMessageDialog(this, "Password must contain at least one digit and one letter");
        return;
        }


        if(!Pass.equals(ConfirmPass)) {
            JOptionPane.showMessageDialog(this, "Confirm password does not match");
            return;
        }


        if(Email.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter your email");
            return;
        }
        String Pass_encrypted = CryptPass.cryptPass(Pass);

        if(!Email.matches("\\w+@\\w+\\.\\w+")) {
            JOptionPane.showMessageDialog(this, "Invalid Email");  
            return;
        }
        
        
        
        if(IsLibrarian){
            if(checkUsernameLibrarian(Uname)) {
                JOptionPane.showMessageDialog(this, "Username already exists");
                return;
            }

            if(checkEmailLibrarian(Email)) {
              JOptionPane.showMessageDialog(this, "Email already exists");
              return;
            }
            int response1 = JOptionPane.showConfirmDialog(null,"Are you sure you want to register as a Librarian?","Confirm",YES_NO_OPTION,QUESTION_MESSAGE);
            if (response1 == JOptionPane.YES_OPTION){
                Date now = new Date();
                java.sql.Date sqlDate = new java.sql.Date(now.getTime());
                try {
                    Connection conn = DB.getConnection();
                    PreparedStatement stmt = conn.prepareStatement("select max(librarianid) as maxId from librarian");
                    ResultSet rs =stmt.executeQuery();
                    int maxId = 0;
                    if(rs.next()){
                        maxId = rs.getInt("maxId");
                    }
                    int librarianId = maxId +1;
                    PreparedStatement statement = conn.prepareStatement("INSERT INTO librarian (LibrarianID,Fullname,UserName,Password,Email,RegDate) VALUES (?, ?, ?,?,?,?)");

                    statement.setInt(1, librarianId);
                    statement.setString(2, FullName);
                    statement.setString(3,Uname);
                    statement.setString(4, Pass_encrypted);
                    statement.setString(5, Email);
                    statement.setDate(6, sqlDate);
                    
                    int rowsInserted = statement.executeUpdate();

                    if (rowsInserted > 0) {
                        JOptionPane.showMessageDialog(this, "Successfully registered as a Librarian");
                    }

                    
                }catch(HeadlessException | SQLException e){System.out.println(e);


                }
            }
        }else{
            if(checkUsernameUser(Uname)) {
                JOptionPane.showMessageDialog(this, "Username already exists");
                return;
            }

            if(checkEmailUser(Email)) {
              JOptionPane.showMessageDialog(this, "Email already exists");
              return;
            }
            int response2 = JOptionPane.showConfirmDialog(null,"Are you sure you want to register as an User?","Confirm",YES_NO_OPTION,QUESTION_MESSAGE);
            if (response2 == JOptionPane.YES_OPTION){
                Date now = new Date();
                java.sql.Date sqlDate = new java.sql.Date(now.getTime());
                try {
                    Connection conn = DB.getConnection();
                    PreparedStatement stmt = conn.prepareStatement("select max(userid) as maxId from users");
                    ResultSet rs =stmt.executeQuery();
                    int maxId = 0;
                    if(rs.next()){
                        maxId = rs.getInt("maxId");
                    }
                    int userId = maxId +1;
                    PreparedStatement statement = conn.prepareStatement("INSERT INTO users (UserID,UserPass,RegDate,UserName, Email,FullName) VALUES (?, ?, ?,?,?,?)");
                    
                    statement.setInt(1, userId);
                    statement.setString(2, Pass_encrypted);
                    statement.setDate(3, sqlDate);
                    statement.setString(4, Uname);
                    statement.setString(5, Email);
                    statement.setString(6, FullName);
                    System.out.println(statement);
                    int rowsInserted = statement.executeUpdate();

                    if (rowsInserted > 0) {
                        JOptionPane.showMessageDialog(this, "Successfully registered as an User");
                    }
                    conn.close();
                }catch(HeadlessException | SQLException e){System.out.println(e);
                }
            }
        }
        


        
    }//GEN-LAST:event_jButton2ActionPerformed


    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(signup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(signup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(signup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(signup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new signup().setVisible(true);
        });
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> choice;
    private javax.swing.JPasswordField confirmpassword;
    private javax.swing.JTextField email;
    private javax.swing.JTextField fullname;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
}
